# 1. Дополните приведенный код, используя списочное выражение так, чтобы получить новый список,
# содержащий строки исходного списка, где у каждой строки удалён первый символ.
keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del',
            'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda',
            'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']

new_keywords = [i[1:] for i in keywords]

print(new_keywords)


# 2. Дополните приведенный код, используя списочное выражение, так, чтобы получить новый список,
# содержащий длины строк исходного списка.
keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del',
            'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda',
            'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']

lengths = [len(i) for i in keywords]

print(lengths)


# 3. Дополните приведенный код списочным выражением, чтобы получить новый список,
# содержащий только слова длиной не менее пяти символов (включительно).
keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del',
            'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda',
            'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']

new_keywords = [i for i in keywords if len(i) > 4]

print(new_keywords)


# 4. Дополните приведенный код, используя списочное выражение, так чтобы получить список всех
# чисел-палиндромов от 100 до 1000 (включительно). Примечание. Результирующий список должен состоять из целых чисел.
palindromes = [i for i in range(100,1001) if str(i) == str(i)[::-1]]

print(palindromes)


# 5. На вход программе подается натуральное число n. Напишите программу, использующую списочное выражение,
# которая создает список, содержащий квадраты чисел от 1 до n (включительно),
# а затем выводит его элементы построчно, то есть каждый на отдельной строке.
n = int(input())
lst = [print(i**2) for i in range(1, n+1)]


# 6. На вход программе подается строка текста, содержащая целые числа. Напишите программу,
# использующую списочное выражение, которая выведет кубы указанных чисел также на одной строке.
n = input().split()
lst = [print(int(i)**3, end = ' ') for i in n]


# 7. На вход программе подается строка текста, содержащая слова. Напишите программу,
# которая выводит слова введенной строки в столбик. Примечание. Программу можно написать в одну строку кода.
print(*input().split(), sep='\n')


# 8. На вход программе подается строка текста. Напишите программу, использующую списочное выражение,
# которая выводит все цифровые символы данной строки.
s = [i for i in input() if i.isdigit()]
print(*s, sep='')


# 9. На вход программе подаётся строка текста, содержащая целые числа. Напишите программу, использующую списочное
# выражение, которая выведет квадраты чётных чисел, кроме тех квадратов, которые оканчиваются на цифру 4.
s = [int(i) for i in input().split()]
s1 = [i**2 for i in s if i%2 == 0 and ((i**2)%10) != 4]
print(*s1)