# 1. Программисты, как вы уже знаете, постоянно учатся, а в общении между собой используют весьма специфический язык.
# Чтобы систематизировать ваш пополняющийся профессиональный лексикон, мы придумали эту задачу. Напишите программу
# создания небольшого словаря сленговых программерских выражений, чтобы она потом по запросу возвращала значения из
# этого словаря. В первой строке задано одно целое число n — количество слов в словаре. В следующих n строках записаны
# слова и их определения, разделенные двоеточием и символом пробела. В следующей строке записано целое число
# m — количество поисковых слов, чье определение нужно вывести. В следующих m строках записаны сами слова, по одному на строке.
n = int(input())
word_d = [tuple(input().split(': ')) for i in range(n)]
d = {}
for i in word_d:
    d[i[0].lower()] = i[1]
s = int(input())
word = [input().lower() for i in range(s)]
for i in word:
    if i in d:
        print(d[i])
    else:
        print('Не найдено')


# 2. Анаграмма – слово (словосочетание), образованное путём перестановки букв, составляющих другое слово
# (или словосочетание). Например, английские слова evil и live – это анаграммы.
# На вход программе подаются два слова. Напишите программу, которая определяет, являются ли они анаграммами.
n1 = input()
n2 = input()
d1 = {}
d2 = {}
for i in n1:
    d1[i] = d1.get(i, 0) + 1
for i in n2:
    d2[i] = d2.get(i, 0) + 1
if d1 == d2:
    print('YES')
else:
    print('NO')


# 3. На вход программе подаются два предложения. Напишите программу, которая определяет, являются они анаграммами или
# нет. Ваша программа должна игнорировать регистр символов, знаки препинания и пробелы.
n1 = ''.join([i.strip('.,!?:;-').lower() for i in input().split()])
n2 = ''.join([i.strip('.,!?:;-').lower() for i in input().split()])
d1 = {}
d2 = {}
for i in n1:
    d1[i] = d1.get(i, 0) + 1
for i in n2:
    d2[i] = d2.get(i, 0) + 1
if d1 == d2:
    print('YES')
else:
    print('NO')


# 4. Вам дан словарь, состоящий из пар слов-синонимов. Повторяющихся слов в словаре нет. Напишите программу, которая
# для одного данного слова определяет его синоним. На вход программе подается количество пар синонимов n. Далее следует
# n строк, каждая строка содержит два слова-синонима. После этого следует одно слово, синоним которого надо найти.
# Примечание 1: Гарантируется, что синоним введенного слова существует в словаре.
# Примечание 2: Все слова в словаре начинаются с заглавной буквы.
d = {k:v for k, v in (input().split() for _ in range(int(input())))}
s = input()
for k, v in d.items():
    if s == v:
        print(k)
    if s == k:
        print(v)


# 5. На вход программе подается список стран и городов каждой страны. Затем даны названия городов. Напишите программу,
# которая для каждого города выводит, в какой стране он находится. Программа получает на вход количество стран n.
# Далее идет n строк, каждая строка начинается с названия страны, затем идут названия городов этой страны. В следующей
# строке записано число m, далее идут m запросов — названия каких-то m городов, из перечисленных выше.
d = {k:v for k, *v in (input().split() for _ in range(int(input())))}
s = int(input())
for i in range(s):
    city = input()
    for k, v in d.items():
        if city in v:
            print(k)


# 6. Тимур записал телефоны всех своих друзей, чтобы автоматизировать поиск нужного номера.
# У каждого из друзей Тимура может быть один или более телефонных номеров. Напишите программу, которая поможет Тимуру
# находить все номера определённого друга. В первой строке задано одно целое число n — количество номеров телефонов,
# информацию о которых Тимур сохранил в телефонной книге. В следующих n строках заданы телефоны и имена их владельцев
# через пробел. В следующей строке записано целое число m — количество поисковых запросов от Тимура. В следующих
# m строках записаны сами запросы, по одному на строке. Каждый запрос — это имя друга, чьи телефоны Тимур хочет найти.
d = {}
for i in range(int(input())):
    v, k = input().split()
    if k not in d.keys():
        d[k] = [v]
    else:
        for key, val in d.items():
            if k == key:
                val.append(v)
                d[key] = val
for i in range(int(input())):
    name = input().title()
    if name not in d.keys():
        print('абонент не найден')
    else:
        print(*d[name])

# ИЛИ
d = {}
for i in range(int(input())):
    v, k = input().split()
    d.setdefault(k, []).append(v)
for i in range(int(input())):
    name = input().title()
    if name not in d.keys():
        print('абонент не найден')
    else:
        print(*d[name])


# 7. Напишите программу для расшифровки секретного слова методом частотного анализа. В первой строке задано
# зашифрованное слово. Во второй строке задано одно целое число n – количество букв в словаре. В следующих
# n строках записано, сколько раз конкретная буква алфавита встречается в этом слове – <буква>: <частота>.
s1 = input()
d1 = {k:s1.count(k) for k in s1}
d2 = {int(v):k.strip(':') for k, v in (input().split() for _ in range(int(input())))}
for i in s1:
    for j in d2:
        if d1[i] == j:
            print(d2[j], end='')
