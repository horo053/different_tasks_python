# 1. Как известно из курса биологии, ДНК и РНК – последовательности нуклеотидов. Напишите программу, переводящую цепь
# ДНК в цепь РНК. На вход программе подается корректная цепь ДНК в верхнем регистре.
d = {'A': 'U', 'C': 'G', 'G': 'C', 'T': 'A'}
s = [d[i] for i in input() if i in d]
print(*s, sep='')


# 2. Дана строка текста на русском языке, состоящая из слов и символов пробела. Словом считается последовательность
# букв, слова разделены одним пробелом или несколькими. Напишите программу, определяющую для каждого слова порядковый
# номер его вхождения в текст именно в этой форме, с учетом регистра. Для первого вхождения слова программа выведет
# 1, для второго вхождения того же слова — 2 и т. д. Программа получает на вход единственную строку текста, состоящую
# только из русских букв и символов пробела.
s = input().split()
d = {}
for i in s:
    d[i] = d.get(i,0) + 1
    print(d[i], end=' ')


# 3. В игре Scrabble каждая буква приносит определенное количество баллов. Общая стоимость слова – сумма баллов его букв.
# Чем реже буква встречается, тем больше она ценится. Напишите программу подсчета итоговой стоимости введенного слова.
# На вход программе подается одно слово в верхнем регистре на английском языке.
s = input()
d = {
    1: "AEILNORSTU",
    2: "DG",
    3: "BCMP",
    4: "FHVWY",
    5: "K",
    8: "JX",
    10: "QZ"
}
sum = 0
for i in s:
    for key in d:
        if i in d[key]:
            sum += key
print(sum)


# 4. Строка запроса (query string) — часть URL адреса, содержащая ключи и их значения. Она начинается после
# вопросительного знака и идет до конца адреса. Например:
# https://beegeek.ru?name=timur                 # строка запроса: name=timur
# Если параметров в строке запроса несколько, то они отделяются символом амперсанда &:
# https://beegeek.ru?name=timur&color=green     # строка запроса: name=timur&color=green
# Напишите функцию build_query_string(), которая принимает на вход словарь с параметрами и возвращает строку запроса,
# сформированную из этих параметров.
def build_query_string(params):
    lst = []
    for k, v in params.items():
        lst.append(f'{k}={v}')
    lst.sort()
    return '&'.join(lst)
print(build_query_string({'name': 'timur', 'age': 28}))


# 5. Напишите функцию merge(), объединяющую словари в один общий. Функция должна принимать список словарей и возвращать
# словарь, каждый ключ которого содержит множество (тип данных set) уникальных значений собранных из всех словарей
# переданного списка. Примечание: Слияние пустых словарей должно быть пустым словарем.
def merge(values):      # values - это список словарей
    d = {}
    for i in values:
        for j in i:
            d.setdefault(j, set()).add(i[j])
    return d
print(merge([{'a': 1, 'b': 2}, {'b': 10, 'c': 100}, {'a': 1, 'b': 17, 'c': 50}, {'a': 5, 'd': 777}]))


# 6. В файловую систему компьютера, на котором развернута наша платформа Stepik, проник опасный вирус и сломал контроль
# прав доступа к файлам. Говорят, вирус написал один из студентов курса Python для начинающих.
# Для каждого файла известно, с какими действиями можно к нему обращаться:
# запись W (write, доступ на запись в файл);
# чтение R (read, доступ на чтение из файла);
# запуск X (execute, запуск на исполнение файла).
# Напишите программу для восстановления контроля прав доступа к файлам. Ваша программа для каждого запроса должна
# будет возвращать OK если выполняется допустимая операция, и Access denied, если операция недопустима.
# Программа получает на вход количество файлов n, содержащихся в файловой системе компьютера. Далее идет n строк,
# на каждой имя файла и допустимые с ним операции, разделенные символом пробела. В следующей строке записано число
# m — количество запросов к файлам, и затем m строк с запросами вида операция файл. Одному и тому же файлу может
# быть адресовано любое количество запросов.
d = {'write': 'W', 'read': 'R', 'execute': 'X'}
file = {k:v for k, *v in [input().split() for _ in range(int(input()))]}
request = [input().split() for _ in range(int(input()))]
for i in request:
    for key, val in file.items():
        if i[1] == key and d[i[0]] in val:
            flag = True
            break
        else:
            flag = False
    print('OK' if flag else 'Access denied')


# 7. Напишите программу для подсчета количества единиц каждого вида товара из приобретенных каждым покупателем
# интернет-магазина. На вход программе подается число n — количество строк в базе данных о продажах интернет-магазина.
# Далее следует n строк с записями вида покупатель товар количество, где покупатель — имя покупателя
# (строка без пробелов), товар — название товара (строка без пробелов), количество — количество приобретенных
# единиц товара (натуральное число).
result = {}
for _ in range(int(input())):
    name, product, count = input().split()
    result.setdefault(name, {})
    result[name][product] = result[name].get(product, 0) + int(count)

for key, value in sorted(result.items()):
    print(f"{key}:")
    for i in sorted(value):
        print(i, value[i])