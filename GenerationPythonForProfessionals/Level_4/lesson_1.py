import sys
from datetime import datetime

# 1. Напишите программу, которая принимает произвольное количество строк и в каждой введенной строке располагает все
# символы в обратном порядке.
# Формат входных данных: На вход программе подается произвольное количество строк.
# Формат выходных данных: Программа должна вывести все введенные строки, предварительно расположив в каждой строке
# все символы в обратном порядке.
# Примечание 1. Порядок вывода строк должен совпадать с порядком их ввода.
# Примечание 2. Если на вход программе ничего не подается, то она ничего не должна выводить
# data = [line.strip()[::-1] for line in sys.stdin]
# for i in data:
#     print(i)


# 2. Дана последовательность дат. Напишите программу, которая выводит количество дней между максимальной и
# минимальной датами данной последовательности.
# Формат входных данных: На вход программе подается произвольное количество строк, в каждой строке записана
# дата в ISO формате (YYYY-MM-DD).
# Формат выходных данных: Программа должна вывести единственное число — количество дней между максимальной
# и минимальной датами введенной последовательности.
# data = [line.strip() for line in sys.stdin]
# data = [datetime.strptime(i.strip(), '%Y-%m-%d').date() for i in data]
# max = max(data)
# min = min(data)
# r = max - min
# print(r.days)


# 3. Анри и Дима, имея на руках ящик с бесконечным количеством носков, решили сыграть в игру.
# Ребята по очереди достают из ящика произвольное количество носков, и после неопределенного числа ходов игра
# заканчивается. Если тот, кто сделал последний ход, вытащил четное количество носков — он побеждает,
# в противном случае проигрывает.
# Напишите программу, которая определяет победителя в данной игре, если первый ход делает Анри.
# Формат входных данных: На вход программе подается произвольное количество строк, в каждой строке записано
# натуральное число — количество носков, которые вытащил один из игроков.
# Формат выходных данных: Программа должна определить победителя в игре, правила которой представлены в
# условии задачи, и вывести его имя.
# data = [line.strip() for line in sys.stdin]
# for i, j in enumerate(data):
#     if len(data)-1 == i:
#         if (i % 2 == 0 and int(j) % 2 == 0) or (i % 2 != 0 and int(j) % 2 != 0):
#             print('Анри')
#         elif (i % 2 != 0 and int(j) % 2 == 0) or (i % 2 == 0 and int(j) % 2 != 0):
#             print('Дима')


# 4. Дан список чисел, каждое из которых — рост очередного ученика онлайн-школы BEEGEEK. Напишите программу,
# которая определяет рост самого низкого и самого высокого учеников, а также средний рост среди всех учеников.
# Формат входных данных: На вход программе подается произвольное количество строк, в каждой строке записано
# натуральное число — рост очередного ученика онлайн-школы BEEGEEK.
# Формат выходных данных: Программа должна определить рост самого низкого и самого высокого учеников,
# а также средний рост среди всех учеников.
# Полученные результаты должны быть выведены в следующем формате:
# Рост самого низкого ученика: <рост самого низкого ученика>
# Рост самого высокого ученика: <рост самого высокого ученика>
# Средний рост: <средний рост среди всех учеников>
# Примечание 1: Если на вход программе ничего не подается, то она должна выводить текст нет учеников.
# data = [line.strip() for line in sys.stdin]
# data = list(map(int, data))
# data.sort()
# if len(data) == 0:
#     print('нет учеников')
# else:
#     print(f'Рост самого низкого ученика: {data[0]}')
#     print(f'Рост самого высокого ученика: {data[-1]}')
#     print(f'Средний рост: {sum(data) // len(data)}')


# 5. Дан блок кода на языке Python. Напишите программу, которая определяет количество строк в данном коде,
# которые содержат в себе только комментарии. Если в строке помимо комментария имеется что-то еще,
# то такую строку учитывать не нужно.
# Формат входных данных: На вход программе подается произвольное количество строк, в совокупности представляющих
# блок кода на языке Python.
# Формат выходных данных: Программа должна вывести единственное число — количество строк в введенном коде,
# которые содержат в себе только комментарии.
# data = [line.strip() for line in sys.stdin]
# count = 0
# for i in data:
#     if i[0] =='#':
#         count += 1
# print(count)


# 6. Дан блок кода на языке Python. Напишите программу, которая удаляет все строки в данном коде,
# которые содержат в себе только комментарии. Если в строке помимо комментария имеется что-то еще,
# то такую строку учитывать не нужно.
# Формат входных данных: На вход программе подается произвольное количество строк, в совокупности
# представляющих блок кода на языке Python.
# Формат выходных данных: Программа должна вывести введенный блок кода, предварительно удалив из него все
# строки которые содержат в себе только комментарии.
# Примечание 1. Порядок вывода строк кода должен совпадать с порядком их ввода.
# for line in sys.stdin:
#     if (line.lstrip(' ')[0] != '#'):
#         print(line.rstrip('\n'))


# 7. По чатам одного немалоизвестного мессенджера начали появляться новости сомнительного содержания.
# Оказалось, что некий молодежный клуб решил подшутить, распространяя всякие глупости. Однако подобное хулиганство
# мешает доверчивым людям, особенно пенсионного возраста, поэтому группа независимых программистов решила разработать
# бота, который мог бы оценить степень достоверности новости, а также отнести её к какой-либо категории.
# Напишите программу, которая выводит все новости заданной категории, располагая их по возрастанию
# степени достоверности.
# Формат входных данных: На вход программе подается произвольное количество строк, в каждой строке, кроме последней,
# записана новость, категория, к которой она относится, и ее достоверность в следующем формате:
# <новость> / <категория> / <достоверность>
# В последней строке подается одиночная категория.
# Формат выходных данных: Программа должна вывести все новости, которые относятся к введенной категории.
# Новости должны быть расположены в порядке возрастания степени достоверности, а при совпадении степеней
# достоверности — в лексикографическом порядке самих новостей.
# data = [line.strip() for line in sys.stdin]
# category = data[-1]
# data.pop(-1)
# data = [i.split(' / ') for i in data]
# l = []
# for i, j in enumerate(data):
#     if j[1] == category:
#         l.append(j)
# k = sorted(l, key=lambda x:(x[2], x[0]))
# for i in k:
#     print(i[0])


# 8. Дана последовательность дат. Напишите программу, которая определяет, в каком порядке расположены даты в
# данной последовательности.
# Формат входных данных: На вход программе подается произвольное количество строк (две или более),
# в каждой строке записана дата в формате DD.MM.YYYY.
# Формат выходных данных: Программа должна вывести текст:
# ASC, если даты в введенной последовательности расположены строго в порядке возрастания
# DESC, если даты в введенной последовательности расположены строго в порядке убывания
# MIX, если даты в введенной последовательности расположены ни в порядке возрастания, ни в порядке убывания
# data = [line.strip() for line in sys.stdin]
# data = [datetime.strptime(i.strip(), '%d.%m.%Y').date() for i in data]
# sort_max = sorted(data)
# sort_min = sorted(data, reverse=True)
# if len(data) != len(set(data)):
#     print('MIX')
# else:
#     if data == sort_max:
#         print('ASC')
#     elif data == sort_min:
#         print('DESC')
#     else:
#         print('MIX')


# 9. Дана последовательность целых чисел. Напишите программу, которая определяет, является ли данная
# последовательность прогрессией, и если да, то определяет её вид.
# Формат входных данных: На вход программе подается произвольное количество строк (не менее трёх), в каждой строке
# записано натуральное число — очередной член последовательности.
# Формат выходных данных: Программа должна вывести текст:
# Арифметическая прогрессия, если введенная последовательность чисел является арифметической прогрессией
# Геометрическая прогрессия, если введенная последовательность чисел является геометрической прогрессией
# Не прогрессия, если введенная последовательность чисел не является прогрессией
# Примечание 1. Гарантируется, что вид прогрессии определяется однозначно.
data = [line.strip() for line in sys.stdin]
data = list(map(int, data))
ariifmetic_key, geometry_key = data[0], data[0]
ariifmetic = [ariifmetic_key, ]
geometry = [geometry_key, ]
for i in range(len(data)-1):
    ariifmetic_key = ariifmetic_key+1
    ariifmetic.append(ariifmetic_key)
for i in range(len(data)-1):
    geometry_key = geometry_key*2
    geometry.append(geometry_key)
if ariifmetic == data:
    print('Арифметическая прогрессия')
elif geometry == data:
    print('Геометрическая прогрессия')
else:
    print('Не прогрессия')