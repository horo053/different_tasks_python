#1. Сегодня Тимур ждёт в гости своего друга Артура, чтобы спланировать работу по новому курсу "ООП на Python".
# Чтобы подготовиться к встрече, Тимуру необходимо посетить два магазина, расположенных рядом с его домом.
# От дома до первого магазина ведёт дорожка длиной d1 метров, а до второго магазина ведёт дорожка длиной
# d2 метров. Также существует дорожка, соединяющая два магазина друг с другом, длиной d3 метров.
# Напишите программу, которая вычисляет минимальное расстояние, которое потребуется пройти Тимуру,
# чтобы посетить оба магазина и вернуться домой. Тимур всегда стартует из дома. Он должен посетить оба магазина,
# перемещаясь только по имеющимся трём дорожкам, и вернуться назад домой. При этом его совершенно не смутит,
# если ему придётся посетить один и тот же магазин или пройти по одной и той же дорожке более одного раза.
# Единственная его задача — минимизировать суммарное пройденное расстояние.
lst = [int(input()) for _ in range(3)]
lst.sort()

a1 = sum(lst)
a2 = lst[0] * 2 + lst[1] * 2
a3 = lst[1] * 2 + lst[2] * 2

print(min(a1, a2, a3))


#2. В русском и английском языках есть буквы, которые выглядят одинаково. Вот список английских букв
# "AaBCcEeHKMOoPpTXxy", а вот их русские аналоги "АаВСсЕеНКМОоРрТХху". Напишите программу, которая для трёх букв из
# данных списков букв определяет, русские они, английские или и те и другие (смесь русских и английских букв).
lst = [input() for _ in range(3)]
res = 0
for i in lst:
    if i in 'AaBCcEeHKMOoPpTXxy':
        res -= 1
    if i not in 'AaBCcEeHKMOoPpTXxy':
        res += 1
if res == 3:
    print('ru')
elif res == -3:
    print('en')
else:
    print('mix')


#3. Дана последовательность натуральных чисел от 1 до n включительно. Напишите программу, которая сначала
# располагает в обратном порядке часть элементов этой последовательности от элемента с номером X до элемента
# с номером Y, а затем от элемента с номером A до элемента с номером B.
n, x, y, a, b = map(int, input().split())
lst = [i for i in range(1, n+1)]
lst_x_y = lst[x-1:y]
lst_x_y.reverse()
lst = lst[:x-1] + lst_x_y + lst[y:]
lst_a_b = lst[a-1:b]
lst_a_b.reverse()
lst = lst[:a-1] + lst_a_b + lst[b:]
print(lst)

#ИЛИ
n, x, y, a, b = [int(i) for i in input().split()]
nums = list(range(1, n + 1))
nums[x - 1:y] = reversed(nums[x - 1:y])
nums[a - 1:b] = reversed(nums[a - 1:b])
print(*nums)


#4. Дана последовательность неотрицательных целых чисел. Напишите программу, которая выводит те числа,
# которые встречаются в данной последовательности более одного раза.
lst = list(map(int, input().split()))
lst_d = []
d = {k: 0 for k in lst}
for i in lst:
    if i in d.keys():
        d[i] += 1
for i, j in d.items():
    if j > 1:
        lst_d.append(i)
lst_d.sort()
print(*lst_d)


#5. Назовем набор различных натуральных чисел группой. Например: (13,4,22,40). Тогда длиной группы будем считать
# количество чисел в группе. Например, длина группы (13,4,22,40) равна 4. Дана последовательность натуральных чисел от
# 1 до n включительно. Напишите программу, которая группирует все числа данной последовательности по сумме их цифр и
# определяет длину группы, содержащей наибольшее количество чисел.
n = int(input())
lst = [i for i in range(1, n+1)]
dc = dict()
for i in lst:
    sum_lst = sum([int(i) for i in str(i)])
    dc.setdefault(sum_lst, []).append(i)

print(max(map(len, dc.values())))


#6. Зачастую переводить сериалы, не теряя изначальный смысл, невозможно, особенно за счет игр слов.
# Сумасшедший режиссер хочет снять сериал, в котором бы в целях эксперимента задействовал как можно больше языков,
# чтобы пользоваться красотой каждого из них. Тем не менее если задействовать слишком много языков, то сериал станет
# непонятен абсолютно всем, поэтому режиссер достает случайных людей на улице и спрашивает их, какие языки они знают,
# таким образом он будет использовать языки которые знают все из них.
# Напишите программу, которая определяет, какие языки будут использоваться в сериале.
n = int(input())
lst = [input().split(', ') for i in range(n)]
d = dict()
for i in lst:
    for j in i:
        d.setdefault(j, []).append(1)
lst_sum = []
for i in d.keys():
    if sum(d[i]) == n:
        lst_sum.append(i)
if lst_sum:
    lst_sum.sort()
    print(', '.join(lst_sum))
else:
    print('Сериал снять не удастся')

#ИЛИ
n = int(input())
l = [set(input().split(', ')) for _ in range(n)]
intersect = set.intersection(*l)
if intersect:
    print(*sorted(intersect), sep=', ')
else:
    print('Сериал снять не удастся')


#7. Напишите программу, которая находит все схожие слова для заданного слова. Слова называются схожими,
# если имеют одинаковое количество и расположение гласных букв. При этом сами гласные могут различаться.
g = 'а, у, о, ы, и, э, я, ю, ё, е'.split(', ')
word = input()
n = int(input())
words = [input() for i in range(n)]
word_position = [i for i, j in enumerate(word) if j in g]
word_sum = sum([1 for i in word if i in g])
lst = []
for i in words:
    sum_chair = 0
    chair_position = []
    sum_chair = sum([1 for k in i if k in g])
    chair_position = [j for j, k in enumerate(i) if k in g]
    if sum_chair == word_sum and chair_position == word_position:
        print(i)

#ИЛИ
vowels = ('а', 'у', 'о', 'ы', 'и', 'э', 'я', 'ю', 'ё', 'е')
pattern = [i for i, c in enumerate(input()) if c in vowels]

for _ in range(int(input())):
    word = input()
    if [i for i, c in enumerate(word) if c in vowels] == pattern:
        print(word)