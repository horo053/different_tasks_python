#1. Объявите в программе функцию с именем get_sq, которая имеет один параметр (принимает вещественное число).
# В теле функции значение параметра возводится в квадрат и возвращается функцией.
# После объявления функции прочитайте (с помощью функции input) вещественное число из входного потока и вызовите
# функцию с прочитанным значением. Выведите на экран число, которое возвратила функция.
def get_sq(x):
    return x ** 2

print(get_sq(float(input())))


#2. Объявите функцию с именем is_triangle, которая принимает три стороны треугольника (целые числа) и проверяет,
# можно ли из переданных аргументов составить треугольник. (Напомню, что у любого треугольника длина любой
# его стороны должна быть меньше суммы двух других). Если проверка проходит,
# функция должна возвращать булево значение True, а иначе False. Вызывать функцию не нужно, только объявить.
def is_triangle(a,b,c):
    if a+b>c and a+c>b and b+c>a:
        return True
    else:
        return False
a,b,c = list(map(int, input().split()))
print(is_triangle(a,b,c))


#3. Объявите функцию с именем is_large, которая принимает строку (в качестве параметра) и возвращает булево значение
# False, если длина строки меньше трех символов, иначе True. Вызывать функцию не нужно, только объявить.
def is_large(strA):
    if len(strA) < 3:
        return False
    return True
print(is_large(input()))


#4. Объявите в программе функцию с одним параметром для проверки переданного числа на четность.
# Функция должна возвращать булево значение True, если переданное число четное и False, в противном случае.
# После объявления функции в цикле на каждой итерации необходимо читать целочисленное числовое значение командой:
# x = int(input())
# Цикл должен работать пока x не равен 1. Если прочитанное значение x четное
# (проверяется с помощью ранее объявленной функции),  то число выводится на экран (каждое с новой строки).
def return_chet():
    x = 0
    while x != 1:
        x = int(input())
        if x % 2 == 0:
            print(x)
return_chet()


#5. Объявите в программе функцию с одним параметром для проверки переданного числа на нечетность.
# Функция должна возвращать булево значение True, если переданное число нечетное, и False в противном случае.
# После объявления функции далее в программе прочитайте последовательность целых чисел,
# подаваемых на вход программе, с помощью команды: lst_d = list(map(int, input().split()))
# Затем, используя генератор списков и объявленную ранее функцию, сформируйте список lst из нечетных значений
# на основе списка lst_d. Результат отобразите на экране командой: print(*lst)
def return_nechet(n):
    return n % 2 != 0
lst_d = list(map(int, input().split()))
lst = [i for i in lst_d if return_nechet(i)]
print(*lst)


#6. На вход программе подается строка (слово), которое читается в переменную tp с помощью команды: tp = input().strip()
# Если переменная tp равна строке "RECT", то следует объявить функцию с именем get_sq с двумя параметрами
# (длина и ширина прямоугольника), вычисляющую площадь прямоугольника по переданным аргументам и возвращающую
# вычисленное значение. (Функция на экран ничего выводить не должна). Если переменная tp не равна строке "RECT",
# то следует объявить функцию с тем же именем get_sq, но с одним параметром (длина стороны квадрата) для
# вычисления площади квадрата (формула: a*a). Вычисленное значение возвращается функцией.
# (Функция на экран ничего выводить не должна). Примечание: в программе должна быть задана только одна функция с
# именем get_sq в зависимости от введенного слова (значения переменной tp). Вызывать функцию не нужно, только объявить.
tp = input().strip()
def get_sq_two(a, b=1):
    if tp == "RECT":
        s = a * b
        return s
    else:
        s = a * a
        return s


#7. Объявите в программе функцию, которая имеет один параметр, принимающий строку.
# Функция должна возвращать булево значение False, если длина переданной строки меньше 6 символов,
# иначе возвращать булево значение True. После объявления функции далее в программе прочитайте из входного потока
# строку с названиями городов, записанных через пробел. Сформируйте на основе прочитанной строки список cities из
# названий городов. Затем, используя генератор списка и ранее объявленную функцию, сформируйте новый список lst из
# названий городов с длинами не менее шести символов (города выбираются из списка cities).
# Результат отобразите на экране командой: print(*lst)
cities = input().split()
def return_bool(cities):
    return len(cities) >= 6
lst_two = [i for i in cities if return_bool(i)]
print(*lst_two)


#9. На вход программе подаются целые числа, записанные в одну строчку через пробел.
# Необходимо их прочитать и сохранить в списке digs. Затем (или в самом начале программы),
# объявить функцию, которая имеет два параметра (будут передаваться максимальное и минимальное значения из
# сформированного списка digs) и возвращающую произведение двух переданных аргументов.
# Вызовите эту функцию с передачей ей в качестве аргументов минимального и максимального числового значения из
# списка digs. Отобразите на экране значение, возвращенное функцией.
# Подсказка: для передачи аргументов функции используйте стандартные функции max и min языка Python.
def return_muil(min, max):
    mult = min * max
    print(mult)
digs = list(map(int, input().split()))
return_muil(min(digs), max(digs))