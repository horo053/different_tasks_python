#2. Объявите в программе функцию с именем get_rect_value, которая первыми двумя параметрами принимает длину и
# ширину прямоугольника (числа), а третий формальный параметр tp имеет начальное значение 0. Если параметр tp
# равен нулю, то функция должна возвращать периметр прямоугольника, вычисленного на основе первых двух переданных
# аргументов, а иначе его площадь. P. S. Вызывать функцию не нужно, только объявить
def get_rect_value(length, wigth, tp = 0):
    if tp == 0:
        return 2 * (length + wigth)
    return length * wigth


#3. Объявите в программе функцию с именем check_password, которая первым параметром принимает
# строку (пароль) и имеет второй формальный параметр chars с начальным значением в виде строки "$%!?@#".
# Функция должна проверять, есть ли в пароле хотя бы один символ из chars и что длина пароля не менее 8 символов.
# Если проверка проходит, то функция возвращает булево True, иначе False.
# P. S. Вызывать функцию не нужно, только объявить.
def check_password(pass_str, chars = "$%!?@#"):
    flag = True
    for i in pass_str:
        if i in chars and len(pass_str) > 7:
            flag = True
        else:
            flag = False
    if flag: return True
    else: return False


#4. Объявите в программе функцию, которая первым параметром принимает строку (с кириллицей и латиницей)
# и преобразовывает в ней кириллические символы в латиницу, используя следующий словарь для замены русских
# букв на соответствующее латинское написание. Функция должна возвращать результат преобразования переданной строки
# в латиницу. Замены делать без учета регистра (исходную строку вначале следует перевести в нижний регистр - малые буквы).
# Второй формальный параметр функции с именем sep и начальным значением в виде строки "-".
# Он определяет символ для замены пробелов в строке. На вход программе подается строка, которую необходимо прочитать
# (после объявления функции). Затем, дважды вызовите функцию (с выводом результата ее работы на экран):
# первый раз только с прочитанной строкой;
# второй раз с прочитанной строкой и именованным аргументом sep со значением '+'.
t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh',
         'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p',
         'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh',
         'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}
def return_str(t, strkl = '', sep='-'):
    strkl = strkl.lower().replace(" ", sep)
    strkl_len = list(i for i in strkl)
    for ind, it in enumerate(strkl_len):
        for key in t:
            if it == key:
                strkl_len[ind] = t.get(key)
    strkl = "".join(strkl_len)
    return strkl
str_t = input()
print(return_str(t, str_t))
print(return_str(t, str_t, '+'))


#5. Объявите в программе функцию, которая первым параметром принимает строку, а второй формальный параметр tag
# с начальным значением в виде строки "h1" определяет тег, в который должна заключаться первая переданная строка.
# Например, мы передаем строку "Hello Python" и заключаем в тег "h1". Функция должна вернуть строку (без кавычек):
# "<h1>Hello Python</h1>"
# То есть, сначала открывается тег <h1>, а в конце строки - закрывается </h1>. И так для любых указанных тегов.
# После объявления функции далее в программе прочитайте из входного потока строку и дважды вызовите функцию
# (с выводом результата ее работы на экран):
# первый раз только со строкой;
# второй раз со строкой и именованным аргументом tag со значением 'div'.
def return_tag(str_tag, tag='h1'):
    return f"<{tag}>{str_tag}</{tag}>"
str_tag = input()
print(return_tag(str_tag))
print(return_tag(str_tag,"div"))


#6. В функцию из предыдущего подвига 5 добавьте в конец еще один третий формальный параметр up с начальным
# булевым значением True. Если параметр up равен True, то тег, указанный в формальном параметре tag,
# следует записывать заглавными буквами, а иначе малыми. После объявления функции далее в программе прочитайте
# из входного потока строку и дважды вызовите функцию (с выводом результата ее работы на экран):
# первый раз со строкой и именованным аргументом tag со значением 'div';
# второй раз со строкой, именованным аргументом tag со значением 'div' и именованным аргументом up со значением False.
def return_tag_up(str_tag, tag='h1', up=True):
    if up:
        return f"<{tag.upper()}>{str_tag}</{tag.upper()}>"
    return f"<{tag.lower()}>{str_tag}</{tag.lower()}>"
str_tag_up = input()
print(return_tag_up(str_tag_up,"div"))
print(return_tag_up(str_tag_up,"div",False))