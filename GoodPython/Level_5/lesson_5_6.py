#1. На вход программе подается натуральное число N (то есть, положительное, целое).
# Требуется его прочитать и создать двумерный (вложенный) список размером N x N элементов, состоящий из всех единиц,
# а затем, в последний столбец записать пятерки. Вывести этот список на экран в виде таблицы чисел,
# как показано в примере ниже. P.S. Будьте внимательны в конце строк пробелов быть не должно!
n = int(input())
for i in range(n):
    for j in range(1, n+1):
        if j == n: print(5, end='')
        else: print(1, end=' ')
    print()
print()
#ИЛИ
arr = list()
for i in range(n):
    arr.append([1] * n)
    arr[i][n - 1] = 5
    print(*arr[i])


#2. На вход программе подаются строки (URL-адреса, каждая с новой строки).
# В программе уже реализовано их чтение и сохранение в списке: lst_in = list(map(str.strip, sys.stdin.readlines()))
# Требуется заменить строках списка lst_in все пробелы на символ дефиса (-).
# Следует учесть, что может быть несколько подряд идущих пробелов. Полученные URL-адреса (строки) вывести на экран
# в столбик в порядке их следования в списке lst_in.
import sys
lst_in = list(map(str.strip, sys.stdin.readlines()))
for i in lst_in:
    while "  " in i:
        i = i.replace("  ", " ")
    i = i.replace(" ", "-")
    print(i)


#3. На вход программе подается натуральное число n. Необходимо его прочитать и найти все простые числа
# (нацело делятся только на 1 и на себя), которые меньше числа n, то есть, в диапазоне [2; n).
# Результат вывести на экран в строчку через пробел.
# Ликбез: квадратная скобка - граница включается; круглая скобка - граница исключается.
# Например [2; n) - диапазон от 2 до n-1 целых чисел.
m = int(input())
for i in range(0, m):
    count = 0
    for j in range(1, i+1):
        if i % j == 0: count += 1
    if count == 2: print(i, end=' ')


#4. На вход программе подается двумерный список размерностью 5 х 5 элементов, состоящий из нулей и в
# некоторых позициях единицы (см. пример ниже). В программе уже реализовано их чтение и сохранение в списке:
# s = sys.stdin.readlines()
# lst_in = [list(map(int, x.strip().split())) for x in s]
# Требуется проверить, не касаются ли единицы друг друга по горизонтали, вертикали и диагонали.
# То есть, вокруг каждой единицы должны быть нули. Если проверка проходит вывести на экран "ДА", иначе "НЕТ".
s = sys.stdin.readlines()
flag = 0
lst_in = [list(map(int, x.strip().split())) for x in s]
for i in range(len(lst_in)-1):
    for j in range(len(lst_in)-1):
        if lst_in[i][j] + lst_in[i][j+1] + lst_in[i+1][j] + lst_in[i+1][j+1] > 1:
            flag = 1
            break
if flag == 0: print("ДА")
else: print("НЕТ")


#5. На вход программе подается двумерный список размерностью 5 х 5 элементов, состоящий из целых чисел (пример см. ниже).
# В программе уже реализовано их чтение и сохранение в списке:
# s = sys.stdin.readlines()
# lst_in = [list(map(int, x.strip().split())) for x in s]
# Необходимо проверить, является ли этот двумерный список симметричным относительно главной диагонали.
# Главная диагональ — та, которая идёт из левого верхнего угла двумерного массива в правый нижний.
# Выведите на экран "ДА", если матрица (таблица чисел) симметрична и "НЕТ" в противном случае.
s = sys.stdin.readlines()
flag = 0
lst_in = [list(map(int, x.strip().split())) for x in s]
for i in range(len(lst_in)):
    for j in range(i+1, len(lst_in)):
        if lst_in[i][j] != lst_in[j][i]:
            flag = 1
            break
if flag == 1: print("НЕТ")
else: print("ДА")


#6. На вход программе подаются целые числа, записанные в одну строку через пробел.
# Необходимо их прочитать и сохранить в списке. Затем, выполнить сортировку выбором полученного списка по возрастанию (неубыванию).
# Вначале мы рассматриваем первый элемент списка и ищем второй минимальный относительно первого элемента (включая и его).
# На рисунке - это последний элемент со значением -1. Затем, меняем местами первый и последний элементы.
# Переходим ко второму элементу списка и повторяем эту же процедуру, но относительно второго элемента
# (то есть, первый уже не рассматриваем). На рисунке минимальный элемент - это 2,
# поэтому менять местами здесь ничего не нужно. Переходим к 3-му элементы со значением 6.
# Относительно него находим минимальный элемент - это 3. Меняем их местами.
# Вот идея алгоритма сортировки выбором. Реализуйте его для сформированного списка целых чисел.
# Результат выведите на экран в виде последовательности чисел, записанных в одну строчку через пробел.
a = list(map(int, input().split()))
for i in range(len(a)-1):
    m = a[i]
    index_m = i
    for j in range(i+1, len(a)):
        if m > a[j]:
            m = a[j]
            index_m = j
    if m != i:
        t = a[i]
        a[i] = a[index_m]
        a[index_m] = t
print(*a)


#7. На вход программе подаются целые числа, записанные в одну строку через пробел. Необходимо их прочитать и сохранить в списке.
# Затем, выполнить сортировку полученного списка по возрастанию (неубыванию) методом всплывающего пузырька.
# При первом проходе перебираем все соседние пары элементов и если значение предыдущего элемента (слева)
# больше значения следующего (справа), то они меняются местами. (На рисунке 3 и 2 меняются местами).
# Следующая пара - это 3 и 6. Они уже выстроены по возрастанию, поэтому ничего не делаем и переходим к следующей паре 6 и -1.
# Меняем значения местами и видим, что на последнем месте находится максимальное значение 6, что нам и нужно.
# При втором проходе делаем все то же самое, но доходим до предпоследнего элемента, так как последнее значение 6 уже отсортировано.
# На третьем проходе исключаем уже последние два элемента и так далее.
# То есть, в этом алгоритме достаточно сделать N-1 проходов, где N - длина списка.
# Вот идея алгоритма сортировки всплывающего пузырька. Реализуйте его для вводимого списка целых чисел.
# Результат выведите на экран в виде последовательности чисел, записанных в одну строчку через пробел.
mas = list(map(int, input().split()))
len_mas = len(mas)
count = 0
for run in range(len_mas-1):
    for i in range(len_mas-1):
        if mas[i] > mas[i+1]:
            count += 1
            mas[i], mas[i+1] = mas[i+1], mas[i]
print(*mas)


#8. В некоторой стране используются денежные купюры достоинством в 1, 2, 4, 8, 16, 32 и 64.
# На вход программы подается натуральное число n. Необходимо его прочитать. Затем определите,
# каким наименьшим количеством денежных купюр достоинством в 1, 2, 4, 8, 16, 32 и 64 можно выплатить сумму n?
# выведите на экран список купюр для формирования суммы n (в одну строчку через пробел,
# начиная с наибольшей и заканчивая наименьшей).
# Предполагается, что имеется достаточно большое количество купюр всех достоинств.
# P.S. Программа может быть реализована и без вложенных циклов.
many = int(input())
lst_many = []
while many > 0:
    if many - 64 >= 0:
        lst_many.append(64)
        many -= 64
    elif many - 32 >= 0:
        lst_many.append(32)
        many -= 32
    elif many - 16 >= 0:
        lst_many.append(16)
        many -= 16
    elif many - 8 >= 0:
        lst_many.append(8)
        many -= 8
    elif many - 4 >= 0:
        lst_many.append(4)
        many -= 4
    elif many - 2 >= 0:
        lst_many.append(2)
        many -= 2
    else:
        lst_many.append(1)
        many -= 1
print(*lst_many)

#ИЛИ
lst = [64, 32, 16, 8, 4, 2, 1]
for i in range(len(lst)):
    while many >= lst[i]:
        print(lst[i], end = ' ')
        many -= lst[i]
